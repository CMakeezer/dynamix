OUT_H = 'messages.hpp'
OUT_CPP = 'messages.cpp'

MAX_ARITY = File.open('../../gen/arity').read.strip.to_i + 1

TYPES = %w(
  int
  float
  double
  char
  size_t
  const\ char*
  int*
  const\ std::string&
  std::string)

RET_TYPES = ['void'] + TYPES


rnd = Random.new(100)

HEAD = <<DATA
// DynaMix
// Copyright (c) 2013-2018 Borislav Stanimirov, Zahary Karadjov
//
// Distributed under the MIT Software License
// See accompanying file LICENSE.txt or copy at
// https://opensource.org/licenses/MIT
//
// this file is automatically generated by a script
//
DATA

header = ''
cpp = ''

1024.times do |i|
  arity = rnd.rand(MAX_ARITY)
  const = rnd.rand(2) == 0 ? 'CONST_' : ''
  multi = rnd.rand(2) == 0 ? 'MULTICAST_' : ''
  ret = RET_TYPES.sample(random: rnd)

  header += "DYNAMIX_#{const}#{multi}MESSAGE_#{arity}(#{ret}, message_#{i}"

  arity.times do |a|
    type = TYPES.sample(random: rnd)
    header += ", #{type}, arg_#{a}"
  end

  header += ");\n"

  cpp += "DYNAMIX_DEFINE_MESSAGE(message_#{i});\n"
end

File.open(OUT_H, 'w') do |f|
  f.write(HEAD)
  f.puts '#pragma once'
  f.puts '#include <dynamix/dynamix.hpp>'
  f.puts
  f.puts(header)
end

File.open(OUT_CPP, 'w') do |f|
  f.write(HEAD)
  f.puts "#include \"#{OUT_H}\""
  f.puts
  f.puts(cpp)
end


